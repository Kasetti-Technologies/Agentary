// tests/unit/tenantAwareHttpClient.test.ts

import axios from "axios";
import MockAdapter from "axios-mock-adapter";
import { createTenantAwareHttpClient } from "../../src/utils/tenantAwareHttpClient";
// CRITICAL FIX: Importing TenantClaims from its actual source, as defined in your utility file.
import { TenantClaims } from "../../src/middleware/tenantContext.middleware"; 

// --- Mock Data aligned with required TenantClaims structure (Fixing Errors 2 & 3) ---
const mockTenantJwt = "MOCK.JWT.TOKEN";
const mockSubId = "tenant-xyz-123";
const mockCorrelationId = "req-1a2b3c4d";

// This object satisfies the full TenantClaims interface required by the spec:
const mockTenantClaims: TenantClaims = {
    // Required fields from the technical spec (TenantContext token claims):
    sub: mockSubId, 
    tenant_name: 'Mock Tenant Name',
    primary_region: 'US-EAST-1',
    allowed_regions: ['US-EAST-1', 'EU-WEST-1'],
    roles: ['tenant_admin', 'user'],
    org_id: 'org-123',
    iat: Math.floor(Date.now() / 1000) - 60,  // Issued At (1 minute ago)
    exp: Math.floor(Date.now() / 1000) + 900,  // Expiration (15 minutes TTL)
    correlation_id: mockCorrelationId, // The primary field under test
};

// Utility getter functions
const getMockJwt = () => mockTenantJwt;
const getMockContext = () => mockTenantClaims;

describe("tenantAwareHttpClient", () => {
    it("should inject X-Tenant-Context and X-Correlation-Id headers on requests (Full Context)", async () => {
        const client = createTenantAwareHttpClient(getMockJwt, getMockContext);
        const mock = new MockAdapter(client);

        mock.onPost("/test").reply((config) => {
            // Assertion: Headers must be injected and match the mock data
            expect(config.headers["X-Tenant-Context"]).toBe(mockTenantJwt);
            expect(config.headers["X-Correlation-Id"]).toBe(mockCorrelationId);
            return [200, { success: true }];
        });

        await client.post("/test", { dummy: 1 });
        mock.restore();
    });

    it("should generate X-Correlation-Id if it is missing in the claims context (Fallback Test)", async () => {
        // Create a claims object where correlation_id is explicitly undefined
        const claimsWithoutCorrelation: TenantClaims = {
            ...mockTenantClaims,
            correlation_id: undefined, 
        };

        // Use a function that returns the modified claims
        const client = createTenantAwareHttpClient(getMockJwt, () => claimsWithoutCorrelation);
        const mock = new MockAdapter(client);

        mock.onGet("/test2").reply((config) => {
            expect(config.headers["X-Tenant-Context"]).toBe(mockTenantJwt);
            
            // Correlation ID must be generated by the interceptor's fallback logic
            const generatedId = config.headers["X-Correlation-Id"] as string;
            expect(generatedId).toBeDefined();
            expect(generatedId).not.toBe("");
            
            // The implementation uses (Math.random() + '').substring(2), which produces a string of digits
            expect(generatedId).toMatch(/^\d+$/);

            return [200, {}];
        });

        await client.get("/test2");
        mock.restore();
    });
});
